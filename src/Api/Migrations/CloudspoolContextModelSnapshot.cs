// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Api.Migrations
{
    [DbContext(typeof(CloudspoolContext))]
    partial class CloudspoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Api.DataModels.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnName("content")
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int?>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("Api.DataModels.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TemplateId")
                        .HasColumnName("template_id")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_formats");

                    b.HasIndex("TemplateId")
                        .HasName("ix_formats_template_id");

                    b.HasIndex("ZoneId", "Alias")
                        .IsUnique()
                        .HasName("ix_formats_zone_id_alias");

                    b.ToTable("formats");
                });

            modelBuilder.Entity("Api.DataModels.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Key")
                        .HasColumnName("key")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasName("ix_projects_key");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Api.DataModels.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Content")
                        .HasColumnName("content")
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("ProjectId", "Alias")
                        .IsUnique()
                        .HasName("ix_resources_project_id_alias");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("Api.DataModels.Spooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Key")
                        .HasColumnName("key")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_spoolers");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasName("ix_spoolers_key");

                    b.HasIndex("ZoneId")
                        .HasName("ix_spoolers_zone_id");

                    b.ToTable("spoolers");
                });

            modelBuilder.Entity("Api.DataModels.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnName("script")
                        .HasColumnType("text");

                    b.Property<string>("ScriptContentType")
                        .IsRequired()
                        .HasColumnName("script_content_type")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_templates");

                    b.HasIndex("ProjectId")
                        .HasName("ix_templates_project_id");

                    b.ToTable("templates");
                });

            modelBuilder.Entity("Api.DataModels.Terminal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Key")
                        .HasColumnName("key")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_terminals");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasName("ix_terminals_key");

                    b.HasIndex("ZoneId")
                        .HasName("ix_terminals_zone_id");

                    b.ToTable("terminals");
                });

            modelBuilder.Entity("Api.DataModels.TerminalRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnName("index")
                        .HasColumnType("integer");

                    b.Property<string>("PrinterName")
                        .HasColumnName("printer_name")
                        .HasColumnType("text");

                    b.Property<int>("SpoolerId")
                        .HasColumnName("spooler_id")
                        .HasColumnType("integer");

                    b.Property<int>("TerminalId")
                        .HasColumnName("terminal_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_terminal_route");

                    b.HasIndex("SpoolerId")
                        .HasName("ix_terminal_route_spooler_id");

                    b.HasIndex("TerminalId")
                        .HasName("ix_terminal_route_terminal_id");

                    b.ToTable("terminal_route");
                });

            modelBuilder.Entity("Api.DataModels.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_zones");

                    b.HasIndex("ProjectId")
                        .HasName("ix_zones_project_id");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("Api.DataModels.ZoneRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnName("index")
                        .HasColumnType("integer");

                    b.Property<string>("PrinterName")
                        .HasColumnName("printer_name")
                        .HasColumnType("text");

                    b.Property<int>("SpoolerId")
                        .HasColumnName("spooler_id")
                        .HasColumnType("integer");

                    b.Property<int>("ZoneId")
                        .HasColumnName("zone_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_zone_route");

                    b.HasIndex("SpoolerId")
                        .HasName("ix_zone_route_spooler_id");

                    b.HasIndex("ZoneId")
                        .HasName("ix_zone_route_zone_id");

                    b.ToTable("zone_route");
                });

            modelBuilder.Entity("Api.DataModels.Format", b =>
                {
                    b.HasOne("Api.DataModels.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("fk_formats_templates_template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.DataModels.Zone", "Zone")
                        .WithMany("Formats")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("fk_formats_zones_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.Resource", b =>
                {
                    b.HasOne("Api.DataModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_resources_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.Spooler", b =>
                {
                    b.HasOne("Api.DataModels.Zone", "Zone")
                        .WithMany("Spoolers")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("fk_spoolers_zones_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.Template", b =>
                {
                    b.HasOne("Api.DataModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_templates_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.Terminal", b =>
                {
                    b.HasOne("Api.DataModels.Zone", "Zone")
                        .WithMany("Terminals")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("fk_terminals_zones_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.TerminalRoute", b =>
                {
                    b.HasOne("Api.DataModels.Spooler", "Spooler")
                        .WithMany()
                        .HasForeignKey("SpoolerId")
                        .HasConstraintName("fk_terminal_route_spoolers_spooler_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.DataModels.Terminal", "Terminal")
                        .WithMany("Routes")
                        .HasForeignKey("TerminalId")
                        .HasConstraintName("fk_terminal_route_terminals_terminal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.Zone", b =>
                {
                    b.HasOne("Api.DataModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_zones_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.DataModels.ZoneRoute", b =>
                {
                    b.HasOne("Api.DataModels.Spooler", "Spooler")
                        .WithMany()
                        .HasForeignKey("SpoolerId")
                        .HasConstraintName("fk_zone_route_spoolers_spooler_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.DataModels.Zone", "Zone")
                        .WithMany("Routes")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("fk_zone_route_zones_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
