# References:
# - https://www.olivercoding.com/2019-12-07-github-release-azdevops/

# Create a github release to trigger this pipeline, where the tag name should be vX.Y.Z

trigger:
 branches:
   include:
     - refs/tags/v*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

# See https://github.com/microsoft/azure-pipelines-tasks/issues/11558 for creating the "github" service connection
# 1. Create a personal access token for Azure DevOps to create the service connection. Do this from https://dev.azure.com/rmja/_usersSettings/tokens
# 2. Create a personal access token for Github. Do this from https://github.com/settings/tokens
#    The recommended scopes are: repo, user, admin:repo_hook (see https://dev.azure.com/rmja/Cloudspool/_settings/adminservices)
# AZURE_PAL = "Token obtained from Azure DevOps"
# GITHUB_PAL = "Token obtained from Github"
# 3. Run the following curl command from bash:
# curl -u rmja:AZURE_PAL \
#    -d '{"name": "github-release","type": "github","url": "https://github.com","authorization":{"scheme":"PersonalAccessToken","parameters":{"accessToken":"GITHUB_PAL"}}}' \
#    -H "Content-Type: application/json" \
#    -X POST \
#    'https://dev.azure.com/rmja/Cloudspool/_apis/serviceendpoint/endpoints?api-version=5.1-preview'
steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 3.1'
  inputs:
    packageType: sdk
    version: 3.1.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
- script: |
    export githubTag=$(git describe --abbrev=0 --tags)
    echo "##vso[task.setvariable variable=githubTag]$githubTag"
    echo "##vso[task.setvariable variable=version]${githubTag/v/}"
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  displayName: Set tag to env variable githubTag and derive version
  failOnStderr: true
- task: DotNetCoreCLI@2
  displayName: "Publish PrintSpooler Win x64 $(Build.BuildNumber)"
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'src/PrintSpooler/PrintSpooler.csproj'
    arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/PrintSpooler-win64 --self-contained -r win-x64 /p:Version=$(version)
    zipAfterPublish: false
- task: ArchiveFiles@2
  displayName: Archive PrintSpooler Win x64 artifacts
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/PrintSpooler-win64/PrintSpooler'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/PrintSpooler-win64.zip'
    replaceExistingArchive: true
- publish: $(Build.ArtifactStagingDirectory)/PrintSpooler-win64.zip
  artifact: PrintSpooler-win64
- task: GithubRelease@0
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
  displayName: 'Add assets to GitHub release tag $(githubTag)'
  inputs:
    gitHubConnection: github-release
    repositoryName: rmja/Cloudspool
    action: edit
    assets: $(Build.ArtifactStagingDirectory)/*
    target: '$(Build.SourceVersion)'
    tag: '$(githubTag)'
    addChangeLog: true
    assetUploadMode: replace
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: 'src/Cloudspool.Api.Client/Cloudspool.Api.Client.csproj'
    includesymbols: true
    includesource: true
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'version'
- task: DotNetCoreCLI@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet'